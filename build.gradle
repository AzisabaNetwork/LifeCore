import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'net.azisaba'
version = '4.4.3'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

tasks.withType(Javadoc)*.options*.encoding =
        tasks.withType(JavaCompile)*.options*.encoding =
                tasks.withType(GroovyCompile)*.groovyOptions*.encoding =
                        'UTF-8'


processResources {
    setDuplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

java {
    withJavadocJar()
    withSourcesJar()
}

def javaComponent = components.named('java').get() as org.gradle.api.component.AdhocComponentWithVariants
javaComponent.withVariantsFromConfiguration(configurations.named('sourcesElements').get()) {
    skip()
}

publishing {
    repositories {
        maven {
            name = 'repo'
            credentials(org.gradle.api.artifacts.repositories.PasswordCredentials.class)
            if (project.version.toString().endsWith('SNAPSHOT')) {
                url = uri(project.findProperty('deploySnapshotURL') ?: System.getProperty('deploySnapshotURL', 'https://repo.azisaba.net/repository/maven-snapshots/'))
            } else {
                url = uri(project.findProperty('deployReleasesURL') ?: System.getProperty('deployReleasesURL', 'https://repo.azisaba.net/repository/maven-releases/'))
            }
        }
    }

    publications {
        create("mavenJava", MavenPublication.class) {
            from javaComponent
            artifact sourcesJar
        }
    }
}

shadowJar {
    setDuplicatesStrategy(DuplicatesStrategy.INCLUDE)

    relocate("org.mariadb", "com.github.mori01231.lifecore.lib.mariadb")
    relocate("com.zaxxer.hikari", "com.github.mori01231.lifecore.lib.hikari")
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }
    maven {
        name = 'azisaba-repo'
        url = 'https://repo.azisaba.net/repository/maven-public/'
    }
    maven {
        name = 'lumine'
        url = 'https://mvn.lumine.io/repository/maven-public/'
    }
    maven {
        name = 'mypet'
        url = 'https://repo.mypet-plugin.de/'
    }
}

dependencies {
    //noinspection GradlePackageUpdate
    implementation 'com.zaxxer:HikariCP:4.0.3'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.6'
    compileOnly 'net.azisaba.ballotbox:receiver:1.0.1'
    compileOnly 'net.azisaba.azipluginmessaging:api:4.0.3'
    compileOnly 'net.azisaba:RyuZUPluginChat:4.2.0'
    //noinspection VulnerableLibrariesLocal
    compileOnly 'com.destroystokyo.paper:paper-api:1.15.2-R0.1-SNAPSHOT'
    compileOnly 'org.spigotmc:spigot:1.15.2-R0.1-SNAPSHOT'
    compileOnly 'io.lumine:Mythic-Dist:4.13.0'
    compileOnly 'com.github.MilkBowl:VaultAPI:1.7'
    compileOnly 'com.github.MyPetORG.MyPet:mypet-api:5c8ceeac6a'
    compileOnly 'de.keyle:knbt:0.0.5'
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
        filteringCharset = 'UTF-8'
    }
}
